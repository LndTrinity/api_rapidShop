// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Avaliacao {
  id        Int      @id @default(autoincrement())
  nota      Int
  comentario String?
  resposta String?
  produto   Produto  @relation(fields: [produtoId], references: [id])
  produtoId Int
  deleted   Boolean   @default(false)
  cliente   Cliente  @relation(fields: [clienteId], references: [id])
  clienteId String
  createdAt DateTime @default(now())
  fotos AvaliacaoFotos[]
  @@map("avaliacoes")
}
model AvaliacaoFotos{
  id Int @id @default(autoincrement())
  descricao   String   @db.VarChar(30)
  codigoFoto String   @db.Text
  cliente Cliente @relation(fields: [clienteId], references: [id])
  clienteId String
  avaliacao Avaliacao @relation(fields: [avaliacaoId], references: [id])
  avaliacaoId Int

  
  @@map("avaliacoes_fotos")
}
model Cliente{
  id        String   @db.VarChar(36) @id @default(uuid())
  nome      String   @db.VarChar(60)
  email     String   @db.VarChar(60) @unique
  senha     String   @db.VarChar(60)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  

  avaliacoes Avaliacao[] 
  avaliacoesFotos AvaliacaoFotos[] 
  fotos Clientes_Fotos[]
  

  @@map("clientes")

}

model Produto{
  id          Int      @id @default(autoincrement())
  nome        String   @db.VarChar(60)
  preco        Decimal  @db.Decimal(10, 2)    
  cor        String
  tamanho    String
  descricao  String
  detalhes   String    @db.Text
  destaque   Boolean   @default(false)
  deleted    Boolean   @default(false)
  quantidade Int
  tipo       String
  genero     String
  marca      Marca @relation(fields: [marcaId],references: [id])
  marcaId    Int
  admin       Admin        @relation(fields: [adminId], references: [id])
  adminId     String         

  fotos      Foto[]
  avaliacoes Avaliacao[]
  @@map("produtos")
}
model Admin {
  id        String   @db.VarChar(36) @id @default(uuid())
  nome         String   @db.VarChar(60)
  email        String   @db.VarChar(60) @unique
  senha        String   @db.VarChar(60)   // senha deve ser varchar(60)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt  
  produtos       Produto[]
  @@map("admins")
}

model Foto {
  id          Int      @id @default(autoincrement())
  descricao   String   @db.VarChar(30)
  codigoFoto  String   @db.Text
  produto       Produto    @relation(fields: [produtoid], references: [id])
  produtoid     Int
  @@map("fotos")
}
model Clientes_Fotos{
  id Int @id @default(autoincrement())
  codigoFoto String   @db.Text
  cliente Cliente @relation(fields: [clienteId], references: [id])
  clienteId String
  @@map("cliente_fotos")
}

model Marca {
  id        Int       @id @default(autoincrement())
  nome      String    @db.VarChar(60)
  produtos  Produto[]
  @@map("marcas")
}

model ClienteTokens{
  id         Int       @id @default(autoincrement())
  token      String    @db.VarChar(6)
  clienteEmail String  @db.VarChar(60)
  isUsed     Boolean @default(false)
  createdAt DateTime @default(now())

}


